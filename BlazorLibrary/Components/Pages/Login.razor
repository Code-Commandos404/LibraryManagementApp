@page "/login"
@rendermode InteractiveServer
@attribute [StreamRendering]
@using DataAccessLibrary
@using LibraryManagementApp.Models
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@inject IPeopleValidate _db

<MudContainer>
    <MudItem xs="12">
        <EditForm Model="loginModel" OnValidSubmit="SubmitForm" OnInvalidSubmit="HandleInvalidSubmit">
            <MudTextField T="string" @bind-Value="loginModel.Email" Label="Email" For="@(() => loginModel.Email)" Counter="100" MaxLength="100" HelperText="Please Input Your Email" Immediate="true" Variant="Variant.Text" />
            <MudTextField T="string" @bind-Value="loginModel.Password"  Label="Password" For="@(() => loginModel.Password)" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" Immediate="true" />
            <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Login" ButtonType="ButtonType.Submit">Sign in</MudButton>
        </EditForm>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudCardContent>
                <h3>Current Form Values</h3>
                <p><strong>Email:</strong> @loginModel.Email</p>
                <p><strong>Password:</strong> @loginModel.Password</p>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudContainer>

@code {
    private LoginModel loginModel = new();

    private async Task SubmitForm()
    {
        bool isValid = false;

        // Log the current form values to the console
        Console.WriteLine($"Email: {loginModel.Email}");
        Console.WriteLine($"Password: {loginModel.Password}");

        if (string.IsNullOrEmpty(loginModel.Email) || string.IsNullOrEmpty(loginModel.Password))
        {
            Console.WriteLine("Blank email and/or password");
            return;
        }

        isValid = await _db.CheckCredentials(loginModel.Email, loginModel.Password);

        if (isValid)
        {
            Navigation.NavigateTo("/Books");
        }
        else
        {
            Console.WriteLine("Invalid credentials");
        }

        StateHasChanged(); // Ensure the UI updates to reflect the current values
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("Form is invalid!");
        Console.WriteLine($"Email: {loginModel.Email}");
        Console.WriteLine($"Password: {loginModel.Password}");

        StateHasChanged(); // Ensure the UI updates to reflect the current values
    }

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void ButtonTestclick()
    {
        isShow = !isShow;
        PasswordInputIcon = isShow ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        PasswordInput = isShow ? InputType.Text : InputType.Password;
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(13, ErrorMessage = "Password must be at least 13 characters long.")]
        public string Password { get; set; }
    }
}


