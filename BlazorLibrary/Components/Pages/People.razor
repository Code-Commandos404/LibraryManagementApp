@page "/people"
@rendermode InteractiveServer
@attribute [StreamRendering]
@using DataAccessLibrary
@using LibraryManagementApp.Models
@using MudBlazor
@using System.ComponentModel.DataAnnotations

@inject IPeopleData _db
@inject ISnackbar Snackbar 
<MudSnackbarProvider/>
<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="View" Icon="@Icons.Material.Filled.List">
        <h3>View People Page</h3>

		<h4> Current People</h4>
		<br />
		<br />
		@if (peopleModels is null)
		{
			<p><em>Loading...</em></p>
		}
		else
		{
			<MudSimpleTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Style="overflow-x: auto;">
				<thead>
					<tr>
						<th>First Name</th>
						<th>Last Name</th>
						<th>Contact Number</th>
						<th>Address</th>
						<th>Gender</th>
						<th>Email</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var person in peopleModels)
					{
						<tr>
							<td>@person.FirstName</td>
							<td>@person.LastName</td>
							<td>@person.ContactNumber</td>
							<td>@person.Address</td>
							<td>@person.Gender</td>
							<td>@person.Email</td>
						</tr>
				
					}
				</tbody>
			</MudSimpleTable>
	
		}
    </MudTabPanel>


    <MudTabPanel Text="Add People" Icon="@Icons.Material.Filled.AddCircle">
        <h3>View People Page</h3>

		<h4> Current People</h4>
		<br />
		<br />
		<MudTextField T="string" @bind-Value="_addPeople.FirstName" Counter="50" MaxLength="50" HelperText="Please Input Your First Name" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="First Name" Variant="Variant.Text" />
		<MudTextField T="string" @bind-Value="_addPeople.LastName" Counter="50" MaxLength="50" HelperText="Please Input Your Last Name" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Last Name" Variant="Variant.Text" />
		<MudTextField T="string" @bind-Value="_addPeople.ContactNumber" Counter="12" MaxLength="12" HelperText="Please Input Your Contact Number" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Contact Number" Variant="Variant.Text" />
		<MudTextField T="string" @bind-Value="_addPeople.Address" Counter="100" MaxLength="100" HelperText="Please Input Your Address" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Address" Variant="Variant.Text" />
		<MudTextField T="string" @bind-Value="_addPeople.Email" Counter="100" MaxLength="100" HelperText="Please Input Your Email" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Email" Variant="Variant.Text" />
		<MudSelect T="string" @bind-Value="_addPeople.Gender" Label="Gender" HelperText="Please Choose Your Gender">
			<MudSelectItem   Value="@("Male")">Male</MudSelectItem>
			<MudSelectItem Value="@("Female")">Female</MudSelectItem>
			<MudSelectItem Value="@("N/A")">N/A</MudSelectItem>
		</MudSelect>
		<MudTextField @bind-Value="_addPeople.Password" Label="Password" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
		
		<br />
		<br />
		<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Label="Add Person" OnClick="InsertaPerson" />
		
    </MudTabPanel>
	
	

</MudTabs>


@code {
	private bool _isExpanded = false;
	
	private bool dense = true;
	private bool hover = true;
	private bool striped = true;
	private bool bordered = true;
	public string Label_Checkbox1 { get; set; } = "Male";
	private IEnumerable<string> MaxCharacters(string ch)
	{
		if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
			yield return "Max 25 characters";
	}
	private bool _loading;
	bool isShow;
	InputType PasswordInput = InputType.Password;
	string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

	void ButtonTestclick()
	{
		@if (isShow)
		{
			isShow = false;
			PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
			PasswordInput = InputType.Password;
		}
		else
		{
			isShow = true;
			PasswordInputIcon = Icons.Material.Filled.Visibility;
			PasswordInput = InputType.Text;
		}
	}


	private PeopleModel _addPeople = new PeopleModel();


	private List<PeopleModel> peopleModels;



	protected override async Task OnInitializedAsync()
	{
		peopleModels = await _db.GetPeople();
	}

	private async Task InsertaPerson()
	{
		var validationContext = new ValidationContext(_addPeople, serviceProvider: null, items: null);
		var validationResults = new List<ValidationResult>();

		if (!Validator.TryValidateObject(_addPeople, validationContext, validationResults, validateAllProperties: true))
		{
			foreach (var validationResult in validationResults)
			{
				Snackbar.Add(validationResult.ErrorMessage, Severity.Error);
			}
			return;
		}


		try
		{
			await _db.InsertPerson(_addPeople);
			Snackbar.Add("New Person added successfully!", Severity.Success);
			_addPeople = new PeopleModel();
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error adding New Person: {ex.Message}", Severity.Error);
		}
	}
}

