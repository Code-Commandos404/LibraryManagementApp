@page "/Sign-up"
@rendermode InteractiveServer
@using DataAccessLibrary
@using LibraryManagementApp.Models
@using MudBlazor
@using System.ComponentModel.DataAnnotations

@inject IPeopleData _db
@inject ISnackbar Snackbar
<style>
	*{
		margin:0;
		padding:0;
	}
</style>
<div id="body" style="height:100vh;display:flex;justify-content:center;align-items:center;background: linear-gradient(to top right,#0c0d0c,#07de3c)">
	<div style="position:relative;width:450px;height:720px;border:none;border-radius:25px;background-color:#0c0d0c;">
		<div style="position:absolute;flex-direction:row; width:85%;margin-left:5%;margin-top:7%;">
			<MudText Typo="Typo.h3" Color="Color.Primary">Sign-Up</MudText>
			<MudTextField T="string" @bind-Value="_addPeople.FirstName" Counter="50" MaxLength="50" HelperText="Please Input Your First Name" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="First Name" Variant="Variant.Text" />
			<MudTextField T="string" @bind-Value="_addPeople.LastName" Counter="50" MaxLength="50" HelperText="Please Input Your Last Name" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Last Name" Variant="Variant.Text" />
			<MudTextField T="string" @bind-Value="_addPeople.ContactNumber" Counter="12" MaxLength="12" HelperText="Please Input Your Contact Number" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Contact Number" Variant="Variant.Text" />
			<MudTextField T="string" @bind-Value="_addPeople.Address" Counter="100" MaxLength="100" HelperText="Please Input Your Address" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Address" Variant="Variant.Text" />
			<MudTextField T="string" @bind-Value="_addPeople.Email" Counter="100" MaxLength="100" HelperText="Please Input Your Email" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Email" Variant="Variant.Text" />
			<MudSelect T="string" @bind-Value="_addPeople.Gender" Label="Gender" HelperText="Please Choose Your Gender">
				<MudSelectItem Value="@("Male")">Male</MudSelectItem>
				<MudSelectItem Value="@("Female")">Female</MudSelectItem>
				<MudSelectItem Value="@("N/A")">N/A</MudSelectItem>
			</MudSelect>
			<MudTextField @bind-Value="_addPeople.Password" Label="Password" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
			<br />
			<br/>
			<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Label="Register" OnClick="InsertaPerson" />
		</div>

		
	</div>

</div>

    


	@code {
		private bool _isExpanded = false;

		private bool dense = true;
		private bool hover = true;
		private bool striped = true;
		private bool bordered = true;
		public string Label_Checkbox1 { get; set; } = "Male";
		private IEnumerable<string> MaxCharacters(string ch)
		{
			if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
				yield return "Max 25 characters";
		}
		private bool _loading;
		bool isShow;
		InputType PasswordInput = InputType.Password;
		string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

		void ButtonTestclick()
		{
			@if (isShow)
			{
				isShow = false;
				PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
				PasswordInput = InputType.Password;
			}
			else
			{
				isShow = true;
				PasswordInputIcon = Icons.Material.Filled.Visibility;
				PasswordInput = InputType.Text;
		}
	}


	private PeopleModel _addPeople = new PeopleModel();


	private List<PeopleModel> peopleModels;



	protected override async Task OnInitializedAsync()
	{
		peopleModels = await _db.GetPeople();
	}

	private async Task ValidateUser()
	{
		
	}

		private async Task InsertaPerson()
		{
			var validationContext = new ValidationContext(_addPeople, serviceProvider: null, items: null);
			var validationResults = new List<ValidationResult>();

			if (!Validator.TryValidateObject(_addPeople, validationContext, validationResults, validateAllProperties: true))
			{
				foreach (var validationResult in validationResults)
				{
					Snackbar.Add(validationResult.ErrorMessage, Severity.Error);
				}
				return;
			}


			try
			{
				await _db.InsertPerson(_addPeople);
				Snackbar.Add("New Person added successfully!", Severity.Success);
				_addPeople = new PeopleModel();
			}
			catch (Exception ex)
			{
				Snackbar.Add($"Error adding New Person: {ex.Message}", Severity.Error);
			}
		}
	}


