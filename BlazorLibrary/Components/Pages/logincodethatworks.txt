@page "/login"
@rendermode InteractiveServer
@attribute [StreamRendering]
@using DataAccessLibrary
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@inject IPeopleValidate _db

<MudContainer>
    <MudItem xs="12">
        <EditForm EditContext="@editContext" OnValidSubmit="SubmitForm" OnInvalidSubmit="HandleInvalidSubmit">
            <MudTextField T="string" Label="Email" @bind-Value="email" Counter="100" MaxLength="100" HelperText="Please Input Your Email" Immediate="true" Variant="Variant.Text" />
            <MudTextField T="string" Label="Password" @bind-Value="password" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" Immediate="true" />
            <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Login" ButtonType="ButtonType.Submit">Sign in</MudButton>
        </EditForm>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudCardContent>
                <h3>Current Form Values</h3>
                <p><strong>Email:</strong> @email</p>
                <p><strong>Password:</strong> @password</p>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudContainer>

@code {
    private string email;
    private string password;
    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(this);
        base.OnInitialized();
    }

    private async Task SubmitForm()
    {
        bool isValid = false;

        // Log the current form values to the console
        Console.WriteLine($"Email: {email}");
        Console.WriteLine($"Password: {password}");

        if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(password))
        {
            Console.WriteLine("Blank email and/or password");
            return;
        }

        isValid = await _db.CheckCredentials(email, password);

        if (isValid)
        {
            Navigation.NavigateTo("/Books");
        }
        else
        {
            Console.WriteLine("Invalid credentials");
        }

        StateHasChanged(); // Ensure the UI updates to reflect the current values
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("Form is invalid!");
        Console.WriteLine($"Email: {email}");
        Console.WriteLine($"Password: {password}");

        StateHasChanged(); // Ensure the UI updates to reflect the current values
    }

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void ButtonTestclick()
    {
        isShow = !isShow;
        PasswordInputIcon = isShow ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        PasswordInput = isShow ? InputType.Text : InputType.Password;
    }
}
